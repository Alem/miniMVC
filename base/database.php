<?php

/**
 * Database class file.
 *
 * @author Zersenay Alem <info@alemmedia.com>
 */


class Database{


	/** 
	 * db() - Accesses database connection 
	 *
	 * Starts connection if model::db not set, otherwise returns model::db
	 *
	 * @return object The PDO object as a property of the current object
	 * 
	 */

	function db(){
		if ( !isset( $this -> db ) )
			$this->db = new PDO('mysql:host=' . DB_SERVER . ';dbname=' . DB_DATABASE,DB_USERNAME,DB_PASSWORD);
		return $this -> db;
	}


	/**
	 * query() - Concatonates query fragements to build a full query
	 *
	 * @param string $fragment - A partial query
	 * @return object
	 *
	 */

	function query($fragment){
		if($fragment)
			$this -> query .= $fragment;
		return $this;
	}


	/** 
	 * query_data() - Sets the array of parameterized data to be passed to prepared statement
	 *
	 * @param mixed $data - Data to be passed
	 */

	function query_data($data){
		if(is_array($data)){
			$data = array_values($data);
			$this -> query_data = array_merge( $this -> query_data,$data);
		}else
			$this -> query_data[] = $data;
	}

	/**
	 * run() - Executes query
	 *
	 * Recieves query generated by query() and query_data generated by query_data()
	 * and prepares then executes the parameterized query. 
	 * On completion clears the stored query & data.
	 *
	 * If insert performed, set last_insert_id property. 
	 * other wise sets the rowcount property.
	 *
	 * @return array The SQL rows.
	 *
	 */

	public function run(){
		$db_link = $this -> db();

		Debugger::instantiate() -> record['PDO_Query'][] = $this -> query;
		Debugger::instantiate() -> record['PDO_Data'][] = print_r($this -> query_data,true);

		$statement = $db_link -> prepare($this -> query);
		$statement -> execute($this -> query_data);

		$this -> clearQuery();

		Debugger::instantiate() -> record['PDO_Errors'][] = print_r($statement -> errorInfo(), true);

		if( isset( $this -> counter['insert'] ) )
			$this -> last_insert_id = $db_link -> lastInsertId();
		else
			$this -> rowcount = $statement -> rowCount();

		$results = $statement -> fetchall(PDO::FETCH_ASSOC);
		Debugger::instantiate() -> record['PDO_Results'][] = print_r($results , true);
		
		return $results;
	}


	/**
	 * clearQuery - Clears query fragment and resets counters
	 *
	 */

	function clearQuery(){
		$this -> query = null;
		foreach ( $this -> counter as $query => $value )
			$this -> counter[$query] = 0;
	}


	/**
	 * saveQuery - Saves query fragment and counters
	 *
	 */

	function saveQuery(){
		$this -> saved_query = $this -> query;
		$this -> saved_counter = $this -> counter;
	}


	/**
	 * restoreQuery - Restores saved query fragment and counters
	 *
	 */

	function restoreQuery(){
		$this -> query = $this -> saved_query;
		$this -> counter = $this -> saved_counter;

	}


	/** 
	 * clean - Cleans any user data.
	 *
	 * Cleaning function, does NOT secure data, simply escapes spechars and strips html.
	 *
	 * @param mixed &$data The data to be cleaned.
	 *
	 */

	function clean( &$data ){
		if (is_array($data)) {
			foreach($data as &$value){
				$this -> clean( $value );
			}
		} else {
			$data = addslashes($data);
			$data = trim($data);
		}
		return $data;
	}

}

?>
