<?php
/**
 * DbQuery class file.
 *
 * @author Z. Alem <info@alemcode.com>
 * @link http://alemcode.com
 * @copyright Copyright 2012, Z.Alem
 * @license http://opensource.org/licenses/bsd-license.php The BSD License
 */

/**
 * The DbQuery class allows basic queries to be performed constructed, managed and executed.
 *
 * @author Z. Alem <info@alemcode.com>
 * @package minimvc.database
 */
class DbQuery
{
	/**
	 * Holds the database object.
	 * @var Database
	 */
	public $database;

	/**
	 * The name of the default working database table.
	 * @var string
	 */
	public $table;

	/**
	 * Holds the database query.
	 * @var string
	 */
	public $query_construct;

	/**
	 * Holds the query data to be parameterized.
	 * @var string
	 */
	public $query_data = array();

	/**
	 * flag to control execution of a query. If set to true, query will not execute.
	 * @var A
	 */
	public $halt_execution = false;

	/**
	 * construct() - Sets the default table for the queryBuilder
	 *
	 * @param Database $database 	The database object
	 * @param string   $table 	The table name
	 */
	public function __construct( Database $database, $table = null )
	{
		$this->database = $database;
		$this->table = $table;
	}

	/**
	 * query() - Concatonates query fragements to build a full query
	 *
	 * @param  string $fragment 	A partial query
	 * @return DbQuery 	The current DbQuery object.
	 */
	public function query($fragment)
	{
		if($fragment)
			$this->query_construct .= $fragment;
		return $this;
	}

	/**
	 * queryData() - Sets the array of parameterized data to be passed to prepared statement
	 *
	 * @param mixed $data 		Data to be passed
	 * @return DbQuery 	The current DbQuery object.
	 */
	public function queryData($data)
	{
		if( is_array($data) )
		{
			$data = array_values( $data );
			$this->query_data = $this->query_data + $data;
		}else
			$this->query_data[] = $data;
		return $this;
	}

	/**
	 * clearQuery - Clears query fragment
	 *
	 * @return DbQuery 	The current DbQuery object.
	 */
	public function clearQuery()
	{
		$this->query_construct = null;
		$this->query_data = array();
		return $this;
	}

	/**
	 * saveQuery - Saves query fragment
	 *
	 * @return DbQuery 	The current DbQuery object.
	 */
	public function saveQuery()
	{
		$this->saved_query = $this->query_construct;
		$this->saved_query_data = $this->query_data;
		return $this;
	}

	/**
	 * restoreQuery - Restores saved query fragment
	 *
	 * @return DbQuery 	The current DbQuery object.
	 */
	public function restoreQuery()
	{
		$this->query_construct = $this->saved_query;
		$this->query_data = $this->saved_query_data;
		return $this;
	}

	/**
	 * cancelQuery() - Prevent execution by dbQuery::fetch()
	 */
	public function cancelQuery()
	{
		$this->halt_execution = true;
	}

	/**
	 * fetch() - Executes query, retrieves data
	 *
	 * Recieves query generated by query() and query_data generated by queryData()
	 * and prepares then executes the parameterized query.
	 * On completion clears the stored query & data.
	 *
	 * Return types accepted: 
	 * FETCH::RESULTS, FETCH::INSERT_ID,
	 * FETCH::ROW_COUNT
	 *
	 * @param  integer $return_type The type of data to return.
	 * @return array 		The SQL rows.
	 *
	 * @uses 	 DbQuery::clear 		Used to clear query after execution
	 */
	public function fetch( $return_type = FETCH::RESULT )
	{
		if( $this->halt_execution )
			return false;

		$result_profile = $this->database->runStatement( $this->query_construct, $this->query_data );

		$this->clearQuery();

		if( $return_type === 0 )
			return $result_profile['fetched'];
		elseif( $return_type === 1 )
			return $result_profile['row_count'];
		elseif( $return_type === 2 )
			return $result_profile['last_insert_id'];
	}

}


/**
 * The fetch class is a psuedo-enum type
 * used by DbQuery (namely DbQuery::fetch)
 *
 * @author Z. Alem <info@alemcode.com>
 * @package minimvc.database
 */
final class Fetch
{
	/**
	 * Fetch the associative array of results
	 * @var string
	 */
	const RESULT   = 0;

	/**
	 * Fetch number of rows affected by last executed query.
	 * @var integer
	 */
	const ROW_COUNT = 1;

	/**
	 * Fetch the id of the last insert. 
	 * @var string
	 */
	const LAST_INSERT_ID = 2;

}

?>
