<?php
/**
 * DbQuery class file.
 *
 * @author Z. Alem <info@alemcode.com>
 * @link http://alemcode.com
 * @copyright Copyright 2012, Z.Alem
 * @license http://opensource.org/licenses/bsd-license.php The BSD License
 */

/**
 * The DbQuery class allows basic queries to be performed via PDO.
 *
 * @author Z. Alem <info@alemcode.com>
 * @package minimvc.database
 */
class DbQuery
{
	/**
	 * Holds the database object.
	 * @var Database
	 */
	public $database;

	/**
	 * The name of the default working database table.
	 * @var string
	 */
	public $table;

	/**
	 * Holds the database query.
	 * @var string
	 */
	public $query_construct;

	/**
	 * Holds the query data to be parameterized.
	 * @var string
	 */
	public $query_data = array();

	/**
	 * Holds the query errors
	 * @var string
	 */
	public $query_errors = array();

	/**
	 * Count-keeper.
	 * @var array
	 */
	public $counter = array(
	);

	/**
	 * 	The id of the last insert. 
	 * @var string
	 */
	public $last_insert_id = null;

	/**
	 * The number of rows affected by last executed query.
	 * @var integer
	 */
	public $row_count = null;

	/**
	 * flag to control execution of a query. If set to true, query will not execute.
	 * @var A
	 */
	public $halt_execution = false;

	/**
	 * construct() - Sets the default table for the queryBuilder
	 *
	 * @param Database $database 	The database object
	 * @param string   $table 	The table name
	 */
	public function __construct( Database $database, $table = null )
	{
		$this->database = $database;
		$this->table = $table;
	}

	/**
	 * query() - Concatonates query fragements to build a full query
	 *
	 * @param  string $fragment 	A partial query
	 * @return DbQuery 	The current DbQuery object.
	 */
	public function query($fragment)
	{
		if($fragment)
			$this->query_construct .= $fragment;
		return $this;
	}

	/**
	 * queryData() - Sets the array of parameterized data to be passed to prepared statement
	 *
	 * @param mixed $data 		Data to be passed
	 * @return DbQuery 	The current DbQuery object.
	 */
	public function queryData($data)
	{
		if( is_array($data) )
		{
			$data = array_values( $data );
			$this->query_data = $this->query_data + $data;
		}else
			$this->query_data[] = $data;
		return $this;
	}

	/**
	 * clearQuery - Clears query fragment and resets counters
	 *
	 * @return DbQuery 	The current DbQuery object.
	 */
	public function clearQuery()
	{
		$this->query_construct = null;
		$this->query_data = array();
		foreach( $this->counter as $query => $value )
			$this->counter[$query] = 0;
		return $this;
	}

	/**
	 * saveQuery - Saves query fragment and counters
	 *
	 * @return DbQuery 	The current DbQuery object.
	 */
	public function saveQuery()
	{
		$this->saved_query = $this->query_construct;
		$this->saved_query_data = $this->query_data;
		$this->saved_counter = $this->counter;
		return $this;
	}

	/**
	 * restoreQuery - Restores saved query fragment and counters
	 *
	 * @return DbQuery 	The current DbQuery object.
	 */
	public function restoreQuery()
	{
		$this->query_construct = $this->saved_query;
		$this->query_data = $this->saved_query_data;
		$this->counter = $this->saved_counter;
		return $this;
	}

	/**
	 * cancelQuery() - Prevent execution by dbQuery::run()
	 */
	public function cancelQuery()
	{
		$this->halt_execution = true;
	}

	/**
	 * run() - Executes query
	 *
	 * Recieves query generated by query() and query_data generated by queryData()
	 * and prepares then executes the parameterized query.
	 * On completion clears the stored query & data.
	 *
	 * If insert performed, set last_insert_id property.
	 * other wise sets the row_count property.
	 *
	 * @return array The SQL rows.
	 *
	 * @uses 	 DbQuery::clear 		Used to clear query after execution
	 */
	public function run()
	{
		if( $this->halt_execution )
			return false;

		Logger::debug('PDO Query', $this->query_construct );
		Logger::debug('PDO Data', $this->query_data );

		$statement = $this->database->connection()->prepare($this->query_construct);
		$statement->execute( $this->query_data );

		$this->clearQuery();

		$errors = array(
			'Database Handle Errors'  => $this->database->connection()->errorInfo(),
			'Statement Handle Errors' => $statement->errorInfo(),
		);

		$this->query_errors[] = $errors;

		Logger::error('PDO Errors', $errors );

		if( isset( $this->counter['insert'] ) )
			$this->last_insert_id = $this->database->connection()->lastInsertId();
		else
			$this->row_count = $statement->rowCount();

		$results = $statement->fetchall( PDO::FETCH_ASSOC );

		return $results;
	}

}

?>
