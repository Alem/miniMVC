<?php
/**
 * DbQuery class file.
 *
 * @author Z. Alem <info@alemmedia.com>
 */

/**
 * The DbQuery class allows basic queries to be performed via PDO.
 *
 */
class DbQuery
{
	/**
	 * @var Database Holds the database object.
	 */
	public $database;


	/**
	 * @var string The name of the default working database table.
	 */
	public $table;


	/**
	 * @var string Holds the database query.
	 */
	public $query;


	/**
	 * @var string Holds the query data to be parameterized.
	 */
	public $query_data = array();


	/**
	 * @var array Count-keeper.
	 */
	public $counter = array( 
	);


	/**
	 * construct() - Sets the default table for the queryBuilder
	 *
	 * @param string $table 	The table name
	 */
	public function __construct( Database $database, $table = null )
	{
		$this -> database = $database;
		$this -> table = $table;
	}


	/**
	 * query() - Concatonates query fragements to build a full query
	 *
	 * @param  string $fragment 	A partial query
	 * @return DbQuery 	The current DbQuery object.
	 */
	function query($fragment)
	{
		if($fragment)
			$this -> query .= $fragment;
		return $this;
	}


	/** 
	 * query_data() - Sets the array of parameterized data to be passed to prepared statement
	 *
	 * @param mixed $data 		Data to be passed
	 * @return DbQuery 	The current DbQuery object.
	 */
	function query_data($data)
	{
		if( is_array($data) )
		{
			$data = array_values ( $data );
			$this -> query_data = $this -> query_data + $data;
		}else
			$this -> query_data[] = $data;
		return $this;
	}


	/**
	 * clearQuery - Clears query fragment and resets counters
	 *
	 * @return DbQuery 	The current DbQuery object.
	 */
	function clearQuery()
	{
		$this -> query = null;
		$this -> query_data = array();
		foreach ( $this -> counter as $query => $value )
			$this -> counter[$query] = 0;
		return $this;
	}


	/**
	 * saveQuery - Saves query fragment and counters
	 *
	 * @return DbQuery 	The current DbQuery object.
	 */
	function saveQuery()
	{
		$this -> saved_query = $this -> query;
		$this -> saved_query_data = $this -> query_data;
		$this -> saved_counter = $this -> counter;
		return $this;
	}


	/**
	 * restoreQuery - Restores saved query fragment and counters
	 *
	 * @return DbQuery 	The current DbQuery object.
	 */
	function restoreQuery()
	{
		$this -> query = $this -> saved_query;
		$this -> query_data = $this -> saved_query_data;
		$this -> counter = $this -> saved_counter;
		return $this;
	}


	/**
	 * run() - Executes query
	 *
	 * Recieves query generated by query() and query_data generated by query_data()
	 * and prepares then executes the parameterized query. 
	 * On completion clears the stored query & data.
	 *
	 * If insert performed, set last_insert_id property. 
	 * other wise sets the rowcount property.
	 *
	 * @return array The SQL rows.
	 * @uses 	 DbQuery::clear 		Used to clear query after execution
	 */
	public function run()
	{
		Logger::debug('PDO Query', $this -> query );
		Logger::debug('PDO Data', print_r($this -> query_data,true) );

		$statement = $this -> database -> connection() -> prepare($this -> query);
		$statement -> execute($this -> query_data);

		$this -> clearQuery();

		Logger::error('PDO Errors', print_r($statement -> errorInfo(), true) );

		if( isset( $this -> counter['insert'] ) )
			$this -> last_insert_id = $this -> database -> connection() -> lastInsertId();
		else
			$this -> rowcount = $statement -> rowCount();

		$results = $statement -> fetchall( PDO::FETCH_ASSOC );

		return $results;
	}


}


?>
